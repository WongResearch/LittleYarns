import * as React from "react";
import { Marker } from "react-map-gl";

const ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3
  c0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9
  C20.1,15.8,20.2,15.8,20.2,15.7z`;


interface Props {
  size?: number
  longitude: number
  latitude: number
  offsetLeft?: number
  offsetTop?: number
  onClick?: () => void
}

const defaultPin = (props: Props) => {
  const {
    longitude,
    latitude,
    offsetLeft = 0,
    offsetTop = 0,
    onClick,
    size = 20,
  } = props

  const pinStyle: React.CSSProperties = {
    fill: "#d00",
    stroke: "none",
    position: "relative",
    left: -(size / 2) + offsetLeft,
    top: -(size / 2) + offsetTop,
  }

  return (
    <Marker
      longitude={longitude}
      latitude={latitude}
    >
      <svg
        height={size}
        viewBox="0 0 24 24"
        style={pinStyle}
        onClick={onClick}
      >
        <path d={ICON} />
      </svg>
    </Marker>
  )
}

const createCustomPin = (pin: React.ReactElement<any>) => {
  const customPin = (props: Props) => {
    const {
      longitude,
      latitude,
      offsetLeft = 0,
      offsetTop = 0,
      onClick
    } = props

    return (
      <Marker
        longitude={longitude}
        latitude={latitude}
      >
        {React.cloneElement(pin, {
          left: -(pin.props.width / 2) + offsetLeft,
          top: -(pin.props.height / 2) + offsetTop,
          onClick,
        })}
      </Marker>
    )
  }

  return customPin
}

const getPinElementType = (pinNode: React.ReactNodeArray) => {
  if (pinNode && pinNode.length > 0) {
    const pin: React.ReactElement<any> = pinNode[0] as React.ReactElement<any>
    return createCustomPin(pin)
  }
  return defaultPin
}

export default getPinElementType
