import * as React from "react"
import InteractiveMap from "react-map-gl"

export interface Props {
    position: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left' | 'top-center',
    mapRef: React.RefObject<InteractiveMap>
}

/**
 * This class can be used to add something to one of the control containers
 * of the Mapbox map.
 */
export class MapboxControlComponent extends React.Component<Props>{
    controlContainer: mapboxgl.IControl
    controlRef: React.RefObject<HTMLDivElement> = React.createRef()

    componentDidMount() {
        this.initializeControl()
    }

    componentWillUnmount() {
        this.removeControl()
    }

    componentDidUpdate() {
        this.removeControl()
        this.initializeControl()
    }

    initializeControl = () => {
        const mapboxMap = this.getMapboxMap()
        this.controlContainer = new MapboxControlContainer(this.controlRef, this.props.position)
        mapboxMap.addControl(this.controlContainer)
    }

    getMapboxMap = () => {
        const { mapRef } = this.props
        return (mapRef && mapRef.current && mapRef.current.getMap()) || null
    }

    removeControl = () => {
        const mapboxMap = this.getMapboxMap()

        if (mapboxMap && mapboxMap.removeControl) {
            this.getMapboxMap().removeControl(this.controlContainer)
        }

        this.controlContainer = null
    }

    render() {
        return (
            <div
                className="mapboxgl-ctrl"
                ref={this.controlRef}>
                {this.props.children}
            </div>
        )
    }
}


class MapboxControlContainer implements mapboxgl.IControl {
    control: any
    position: Props["position"]

    constructor(control: any, position: Props["position"]) {
        this.control = control
        this.position = position
    }

    onAdd(map: mapboxgl.Map): HTMLElement {
        return this.control.current
    }

    onRemove(map: mapboxgl.Map) {
        if (this.control.current) {
            this.control.current.parentNode.removeChild(this.control.current)
        }

        this.control = undefined
    }

    getDefaultPosition(): string {
        return this.position
    }

}
