import * as React from "react";
import { PropertyControls, ControlType } from "framer";
import { Props as MapProps, MapboxMapCore } from "./details/MapboxMapCore";
import getPin from "./details/Pin";
import getCard from "./details/Card";
import "mapbox-gl/dist/mapbox-gl.css";
import { CustomLocationMap } from "./details/CustomLocationMap";
import { MapLocation } from "./details/MapTypes"
import * as MapSearch from "./details/MapSearch"

interface Props extends MapProps, MapSearch.Props {
  locationFile?: string;
  showMarkers: boolean;
  pin?: React.ReactNodeArray;
  card?: React.ReactNodeArray;
  pinOffsetLeft: number;
  pinOffsetTop: number;
  cardOffsetLeft: number;
  cardOffsetTop: number;
}

interface State {
  lastLocationFile?: string;
  locations: MapLocation[];
  selectedLocation?: MapLocation;
  longitude: number;
  latitude: number;
  zoom: number;
  pitch: number;
  bearing: number;
}

const defaultLocations: MapLocation[] = [{ name: "", location: { longitude: 0, latitude: 0 }, focusLocation: { zoom: 14 } }];

/**
 * MarkerMap shows a set of markers on a map and zooms to them
 * on click.
 */
export class MarkerMap extends React.Component<Props, State> {
  static propertyControls: PropertyControls<Props> = {
    ...CustomLocationMap.propertyControls,
    locationFile: {
      type: ControlType.File,
      title: "Locations",
      allowedFileTypes: ["json"]
    },
    showMarkers: {
      type: ControlType.Boolean,
      title: "Markers",
      enabledTitle: "Show",
      disabledTitle: "Hide",
    },
    pin: {
      type: ControlType.ComponentInstance,
      title: "Marker Design",
    },
    pinOffsetLeft: {
      type: ControlType.Number,
      title: "Pin Offset X",
      max: 100,
      min: -100,
    },
    pinOffsetTop: {
      type: ControlType.Number,
      title: "Pin Offset Y",
      max: 100,
      min: -100,
    },
    cardOffsetLeft: {
      type: ControlType.Number,
      title: "Card Offset X",
      max: 50,
      min: -50,
    },
    cardOffsetTop: {
      type: ControlType.Number,
      title: "Card Offset Y",
      max: 50,
      min: -50,
    },
    // Removing custom card options from the UI
    // as Framer does not support custom cards yet
    // card: {
    //   type: ControlType.ComponentInstance,
    //   title: "Card Design",
    // },
    ...MapSearch.propertyControls,
  };

  static defaultProps: Props = {
    ...MapboxMapCore.defaultProps,
    showMarkers: true,
    pinOffsetLeft: 0,
    pinOffsetTop: 0,
    cardOffsetLeft: 0,
    cardOffsetTop: 0,
  };

  constructor(props: Props) {
    super(props);
    this.state = {
      locations: defaultLocations,
      longitude: props.longitude,
      latitude: props.latitude,
      zoom: props.zoom,
      pitch: props.pitch,
      bearing: props.bearing,
    }
    this.updateLocationsIfNecessary()
  }

  updateLocationsIfNecessary() {
    if (this.props.locationFile != this.state.lastLocationFile) {
      this.loadLocationsFromFile(this.props.locationFile);
    }
  }

  render() {
    const {
      cardOffsetLeft,
      cardOffsetTop,
      showMarkers,
      pin,
      pinOffsetLeft,
      pinOffsetTop,
      card,
      locationFile,
      ...rest
    } = this.props;
    const { locations, selectedLocation, ...state } = this.state;

    const Pin = getPin(pin)
    const Card = getCard(card);

    const mapProps = { ...rest, ...state };

    return (
      <MapboxMapCore {...mapProps} locations={locations}>
        {showMarkers && locations.map((loc: MapLocation) => {
          return (
            <Pin
              key={loc.name}
              longitude={loc.location.longitude}
              latitude={loc.location.latitude}
              offsetLeft={pinOffsetLeft}
              offsetTop={pinOffsetTop}
              onClick={() => {
                this.setState({ selectedLocation: loc });
              }}
            />
          );
        })}
        {selectedLocation && (
          <Card
            {...selectedLocation}
            offsetLeft={cardOffsetLeft}
            offsetTop={cardOffsetTop}
            onClick={() => {
              this.setState({ selectedLocation: null });
            }}
          />
        )}
      </MapboxMapCore>
    );
  }

  componentDidUpdate(pp: Props, ps: State) {
    this.updateLocationsIfNecessary()

    if (this.state.selectedLocation && this.state.selectedLocation !== ps.selectedLocation) {
      const { selectedLocation } = this.state;
      const { zoom = 10, bearing = 0, pitch = 0 } = selectedLocation.focusLocation || {};
      const { longitude, latitude } = selectedLocation.location;
      this.setState({
        longitude,
        latitude,
        zoom,
        bearing,
        pitch
      });
    }

    const viewportProperties = ["latitude", "longitude", "zoom", "bearing", "pitch"];
    const changed = viewportProperties.reduce((collection, key) => {
      if (pp[key] !== this.props[key]) {
        collection[key] = this.props[key];
      }
      return collection;
    }, {});
    if (Object.keys(changed).length > 0) {
      this.setState({
        ...changed
      });
    }
  }

  async loadLocationsFromFile(file: string) {
    try {
      const response = await fetch(file);
      const json = await response.json();
      this.setState({
        locations: json,
        lastLocationFile: file,
      });
    } catch (err) {
      console.log(err);
      this.setState({
        locations: defaultLocations,
        lastLocationFile: file,
      });
    }
  }
}
