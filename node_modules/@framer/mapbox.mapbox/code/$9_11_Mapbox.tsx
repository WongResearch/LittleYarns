import * as React from "react";
import { PropertyControls, ControlType } from "framer";
import { Cities } from "./details/Constants";
import { Props as CityProps, CityLocationMap } from "./details/CityLocationMap";
import { Props as CustomProps, CustomLocationMap } from "./details/CustomLocationMap";
import { MapboxMapCore } from "./details/MapboxMapCore";
import * as MapSearch from "./details/MapSearch"

enum LocationType {
  City = "City",
  Custom = "Custom"
}

interface Props extends CityProps, CustomProps, MapSearch.Props {
  locationType: LocationType;
}

///
/// The original Mapbox map component.
/// Allows you to choose between CityLocationMap and CustomLocationMap in the UI.
///
export class Mapbox extends React.Component<Props> {
  static propertyControls: PropertyControls<Props> = {
    ...MapboxMapCore.propertyControls,
    locationType: {
      title: "Control Scheme",
      type: ControlType.Enum,
      options: [LocationType.City, LocationType.Custom],
      optionTitles: ["Pick a city", "Enter numbers"]
    },
    city: {
      type: ControlType.Enum,
      options: Cities.names,
      title: "City",
      hidden: props => props.locationType === LocationType.Custom
    },
    longitude: {
      type: ControlType.Number,
      min: -180,
      max: 180,
      step: 0.001,
      title: "Longitude",
      hidden: props => props.locationType === LocationType.City
    },
    latitude: {
      type: ControlType.Number,
      min: -90,
      max: 90,
      step: 0.001,
      title: "Latitude",
      hidden: props => props.locationType === LocationType.City
    },
    zoom: {
      type: ControlType.Number,
      min: 0,
      max: 22,
      title: "Zoom",
      step: 0.1,
      hidden: props => props.locationType === LocationType.City
    },
    bearing: {
      type: ControlType.Number,
      min: -180,
      max: 180,
      defaultValue: 0,
      step: 1,
      title: "Bearing",
      hidden: props => props.locationType === LocationType.City
    },
    pitch: {
      type: ControlType.Number,
      min: 0,
      max: 60,
      step: 1,
      title: "Pitch",
      hidden: props => props.locationType === LocationType.City
    },
    ...MapSearch.propertyControls,
    dropSearchPin: {
      type: ControlType.Boolean,
      title: "Drop Pin",
      defaultValue: true,
      hidden(props) {
        return props.showSearch === false
      }
    },
    pin: {
      type: ControlType.ComponentInstance,
      title: "Marker Design",
      hidden(props) {
        return props.showSearch === false || props.dropSearchPin === false
      }
    },
  };

  static defaultProps: Partial<Props> = {
    ...MapboxMapCore.defaultProps,
    locationType: LocationType.City,
    city: "Amsterdam, Netherlands",
    bearing: 0,
    pitch: 0,
    latitude: 52.375,
    longitude: 4.9,
    zoom: 12,
    showLocationText: false
  };

  render() {
    const { locationType, ...rest } = this.props;
    if (locationType === LocationType.City) {
      return <CityLocationMap {...rest} />;
    }
    return <CustomLocationMap {...rest} />;
  }
}
