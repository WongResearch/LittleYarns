import * as React from "react";
import { FlyToInterpolator } from "react-map-gl";
import { PropertyControls, ControlType } from "framer";
import { MapSpatialCoordinates } from "./details/MapTypes";
import { MapboxMapCore, Props as MapProps } from "./details/MapboxMapCore";

interface Props extends MapProps {
  locations: MapSpatialCoordinates[];
  transitionDuration: number;
  autoplay: boolean
  autoplayDelay: number;
  repetition: number
}

interface State {
  currentIndex: number;
  spatialCoordinates: MapSpatialCoordinates;
}

const defaultLocations: MapSpatialCoordinates[] = [
  {
    latitude: 51.507351,
    longitude: -0.127758,
    bearing: 0,
    pitch: 0,
    zoom: 11
  },
  {
    latitude: 34.052235,
    longitude: -118.243683,
    bearing: 0,
    pitch: 0,
    zoom: 11
  }
];

export class SequentialLocationMap extends React.Component<Props, State> {
  private loopCounter: number

  static defaultProps: Partial<Props> = {
    ...MapboxMapCore.defaultProps,
    transitionDuration: 2000,
    autoplayDelay: 1500,
    locations: defaultLocations
  };

  static propertyControls: PropertyControls<Props> = {
    ...MapboxMapCore.propertyControls,
    transitionDuration: {
      type: ControlType.Number,
      title: "Fly duration",
      min: 0,
      max: 10000
    },
    autoplay: {
      type: ControlType.Boolean,
      title: "Autoplay",
    },
    autoplayDelay: {
      type: ControlType.Number,
      title: "Delay",
      min: 0,
      max: 10000,
      step: 100,
      defaultValue: 1500,
      hidden(props) {
        return !props.autoplay
      }
    },
    repetition: {
      type: ControlType.Number,
      title: "Repetition",
      min: 0,
      max: 10,
      defaultValue: 0,
      hidden(props) {
        return !props.autoplay
      }
    },
  };

  constructor(props: Props) {
    super(props);

    const { locations } = this.props;
    if (!locations || locations.length < 1) {
      throw new Error("Locations is required to be an array of MapSpatialCoordinates");
    }

    this.loopCounter = 0

    this.state = {
      currentIndex: 0,
      spatialCoordinates: props.locations[0]
    };
  }

  startAutoplay() {
    const { autoplay, autoplayDelay } = this.props
    if (autoplay) {
      setTimeout(() => {
        this.transitView()
      }, autoplayDelay)
    }
  }

  goToLocation(index: number) {
    const { locations } = this.props;
    const i = index % locations.length;
    this.setState({
      currentIndex: i,
      spatialCoordinates: { ...this.state.spatialCoordinates, ...locations[i] }
    });
  }

  transitView() {
    const { autoplay, repetition, locations } = this.props

    // One sequence should always be played
    // repetition is the number of extra loops
    const maxLoopCount = locations.length * (repetition + 1)

    if (autoplay && this.loopCounter < maxLoopCount) {
      this.loopCounter += 1
      this.goToLocation(this.state.currentIndex + 1)
    }
  }

  render() {
    const { locations, ...rest } = this.props;
    const { spatialCoordinates } = this.state;

    return (
      <MapboxMapCore
        transitionInterpolator={new FlyToInterpolator()}
        onTransitionEnd={() => this.transitView()}
        {...rest}
        {...spatialCoordinates}
        onLoad={() => this.startAutoplay()}
        onClick={() => {
          this.goToLocation(this.state.currentIndex + 1);
        }}
      />
    );
  }
}
