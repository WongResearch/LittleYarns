import * as React from "react";
import { Frame, Scroll, Stack, PropertyControls, ControlType } from "framer";

const style: React.CSSProperties = {
    height: "100",
    width: "100%",
    alignItems: "stretch",
    justifyContent: "center",
    textAlign: "center",
    color: "#8855FF",
    background: "rgba(136, 85, 255, 0.1)",

};

// Define type of property
interface Props {
    count: number;
    width: number;
    height: number;
    scrollable: boolean;
}

export class Table extends React.Component<Props> {

    // Set default properties
    static defaultProps = {
    text: "Hello World!"
    }

    // Items shown in property panel
    static propertyControls: PropertyControls = {
    count: { type: ControlType.Number, title: "Item Count"},
    scrollable: { type: ControlType.Boolean, title: "Scroll"}
    }

    generateContent = (props, cells, cellHeight) => {
        const { scrollable, count, width, height } = props;
        
        if (scrollable) {
            const h = cellHeight * count
            var stackHeight;
            if (h > height) {
                stackHeight = h;
            } else {
                stackHeight = height;
            }
            return (
                <Scroll width={width} height={height} overflow={"hidden"} >
                    <Stack width={width} height={stackHeight} overflow={"hidden"}>
                        {cells}
                    </Stack> 
                </Scroll>   
            );
        } else {
            return (
                <Stack width={width} height={height} overflow={"hidden"} >
                    {cells}
                </Stack> 
            );
        }
    }

    render() {
        var cell = this.props.children[0];
        const { scrollable, count, width, height } = this.props;
        let cells = [];
        let content;
        if (cell == null) {
            
            content = <Frame width={width} height={height} >Connect to prototype cell.</Frame> 
        } else {
            for (var i = 0; i<count; i++) {
                var properties = cell.props
                let newCell =  <cell.type   {...cell.props} width={width}></cell.type>
                cells.push(newCell);
                content = this.generateContent(this.props, cells, cell.props.height)
            }
        }


    return (
       <div>
           {content}
       </div> 
        );
    }
}
