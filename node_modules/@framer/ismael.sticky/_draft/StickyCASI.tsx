import * as React from "react"
import { useState, useEffect, cloneElement } from "react"
import { Frame, Scroll } from "framer"

function isStickyElement(el) {
    return (
        el.props.componentIdentifier &&
        el.props.componentIdentifier.includes("StickyElement")
    )
}

function Empty(props) {
    return (
        <div
            style={{
                width: props.width,
                height: props.height,
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
                color: "#8855FF",
                background: "rgba(136, 85, 255, 0.1)",
                overflow: "hidden",
                fontSize: 13,
                fontWeight: 600,
            }}
        >
            Connect to a scroll content frame â†’
        </div>
    )
}

export function Sticky(props) {
    const [scrollY, setScrollY] = useState(0)
    const [lastTop, setLastTop] = useState(0)
    const [contentHeight, setContentHeight] = useState(0)
    const [stuck, setStuck] = useState(null)

    function handleScroll(info) {
        setScrollY(-info.point.y)
    }

    function getTopPosition(props) {
        if (props.top) {
            return props.top
        } else if (contentHeight && props.bottom && props.height) {
            return contentHeight - props.bottom - props.height
        } else {
            return 0
        }
    }

    function clone(e) {
        if (e.props && e.props.children && e.props.children.length) {
            return cloneChilds(e.props.children, getTopPosition(e.props), true)
        }
    }

    var i = 0

    function find(e) {
        if (e.props && e.props.children && e.props.children.length) {
            //console.log(e.props.children)
            cloneChilds(e.props.children, getTopPosition(e.props), false)
        }
    }

    function cloneChilds(childs = [], parentTop, flag) {
        // console.log(parentTop)
        //setStuck(null)
        if (flag) {
            setStuck(null)
        }

        return childs.map(child => {
            if (isStickyElement(child)) {
                let top = getTopPosition(child.props)

                if (child.props.name === "StickyElement3") {
                    //top = parentTop + top
                    console.log({ top, scrollY, child, parentTop })
                }

                if (parentTop > 0) {
                    top = parentTop + top
                }

                if (scrollY > top) {
                    if (lastTop < top) {
                        setLastTop(top)
                    }

                    if (scrollY < lastTop || top >= lastTop) {
                        if (top < lastTop) {
                            setLastTop(0)
                        }

                        setStuck(child)
                    }
                }
            } else {
                find(child)
                //clone(child)
            }
        })
    }

    useEffect(() => {
        const root = props.children[0]

        if (root) {
            setContentHeight(root.props.height)
            clone(root)
        }
    }, [scrollY, props.children])

    if (contentHeight) {
        return (
            <Frame size={"100%"} background="none">
                <Scroll width={"100%"} height={"100%"} onScroll={handleScroll}>
                    {props.children}
                </Scroll>

                {stuck && (
                    <Frame background="none" {...stuck.props} x={0} top={0}>
                        {stuck.props.children}
                    </Frame>
                )}
            </Frame>
        )
    } else {
        return <Empty {...props} />
    }
}
